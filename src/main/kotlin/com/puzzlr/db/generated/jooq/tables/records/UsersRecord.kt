/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.records


import generated.jooq.tables.Users

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class UsersRecord() : UpdatableRecordImpl<UsersRecord>(Users.USERS), Record4<Int?, String?, String?, String?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var username: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var email: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var password: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, String?, String?> = super.fieldsRow() as Row4<Int?, String?, String?, String?>
    override fun valuesRow(): Row4<Int?, String?, String?, String?> = super.valuesRow() as Row4<Int?, String?, String?, String?>
    override fun field1(): Field<Int?> = Users.USERS.ID
    override fun field2(): Field<String?> = Users.USERS.USERNAME
    override fun field3(): Field<String?> = Users.USERS.EMAIL
    override fun field4(): Field<String?> = Users.USERS.PASSWORD
    override fun component1(): Int? = id
    override fun component2(): String? = username
    override fun component3(): String? = email
    override fun component4(): String? = password
    override fun value1(): Int? = id
    override fun value2(): String? = username
    override fun value3(): String? = email
    override fun value4(): String? = password

    override fun value1(value: Int?): UsersRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UsersRecord {
        this.username = value
        return this
    }

    override fun value3(value: String?): UsersRecord {
        this.email = value
        return this
    }

    override fun value4(value: String?): UsersRecord {
        this.password = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?): UsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(id: Int? = null, username: String? = null, email: String? = null, password: String? = null): this() {
        this.id = id
        this.username = username
        this.email = email
        this.password = password
    }
}
